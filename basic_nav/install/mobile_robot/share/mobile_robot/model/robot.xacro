<?xml version="1.0"?>
<!-- En este archivo se declaran todas las variables del robot, la parte geometrica para poder verla en el entorno de gazebo-->
<robot name = "differential_drive_robot" xmlns:xacro="http://www.ros.org/wiki/xacro">
<!-- Siempre se tiene que tener el robot tag, el otro tag va a ser como siempre, al final siempre hay que terminar el tag robot -->

<!-- #########################################-->
<!-- GEOMETRIA Y CONSTANTES A USAR -->
<!-- #########################################-->


<!-- Pi constant -->
<xacro:property name="pi_const" value="3.14159265"/>

<!-- Las constantes van como propiedades de xacro USA M y KG -->
<!-- Body dimensions -->
<xacro:property name= "a" value = "1"/>
<xacro:property name= "b" value = "0.3"/>
<xacro:property name= "c" value = "0.6"/>

<!-- Wheel and caster dimensions -->
<!--Wheel and caster radius-->
<xacro:property name="r" value="0.15"/>
<!-- Wheel distance to the body -->
<xacro:property name="d" value="0.1"/>
<!--  -->
<!-- Tambien se pueden declarar formulas como valores de las constantes -->
<!--  -->

<xacro:property name="s1" value="${b/2+r}" />
<xacro:property name="s2" value="${2*r}" />
<xacro:property name="s3" value="${2*r}" />
<xacro:property name="s4" value="${c/2+d/2}" />


<!-- #########################################-->
<!-- Mass and inertia .... Los momentos de inercia se definen respecto de cada eje -->
<!-- #########################################-->
<!-- Densidad del material 
Densidad del material del cuerpo -->
<xacro:property name="d1" value="2710.0"/>

<!--Densidad del material de las ruedas-->
<xacro:property name="d2" value="2710.0"/>
<xacro:property name="d3" value="2710.0"/>

<!-- Robot body mass, wheel mass, caster mass -->
<!-- Body-->
<xacro:property name="m1" value= "${d1*a*b*c}"/>
<!-- Wheel-->
<xacro:property name="m2" value= "${d2*pi_const*r*r*d}"/>
<!-- Caster-->
<xacro:property name="m3" value= "${d3*(4.0/3.0)*pi_const*r*r*r}"/>

<!--  -->
<!-- Moments of inertia of the robot body -->
<xacro:property name="Ix_body" value= "${(1/12)*m1*(b*b+c*c)}"/>
<xacro:property name="Iy_body" value= "${(1/12)*m1*(a*a+b*b)}"/>
<xacro:property name="Iz_body" value= "${(1/12)*m1*(a*a+c*c)}"/>




<!-- Moments of inertia of the wheel-->
<xacro:property name="Iz_wheel" value="${0.5*m2*r*r}"/>
<xacro:property name="I_wheel" value="${(1.0/12.0) * m2 * (3.0*r*r+d*d)}"/>

<!-- Moments of inertia of the caster sphere-->
<xacro:property name="I_caster" value="${(2.0/5.0)*m3*r*r}"/>


<!-- Esta macro define todo el momento de inercia que se usa en el body del robot, se usa despues en el codigo-->
<xacro:macro name="inertia_body">
  <inertial>
    <!-- Desplazamiento y orientacion del centro de masa del link con respecto a -->
    <origin rpy="0 0 0" xyz="0 0 ${s1}"/>
    <mass value="${m1}"/>
    <inertia ixx="${Ix_body}" ixy="0.0" ixz="0.0" iyy="${Iy_body}" iyz="0" izz="${Iz_body}" />
  </inertial>
</xacro:macro>
<!-- Define la posicion del centro de masa del link con respecto al parent del centro de coordenadas. Define el tenso de inercia o su matriz-->
<!-- Le pongo el cnetro de coordenadas en el cnetro de masa del body link, este lo hago con respecto a c1 rpy row pitch yaw
Como son paralelos los cierro y tengo un desplazamiento en s1 (que era la distancia)-->

<!-- Macro para las ruedas-->
<xacro:macro name="inertia_wheel">
  <inertial>
    <!-- Desplazamiento y orientacion del centro de masa del link con respecto a -->
    <origin rpy="1.570795 0 0" xyz="0 0 0"/>
    <mass value="${m2}"/>
    <inertia ixx="${I_wheel}" ixy="0.0" ixz="0.0" iyy="${I_wheel}" iyz="0" izz="${Iz_wheel}" />
  </inertial>
</xacro:macro>

<!--Macro para el caster ese-->

<xacro:macro name="inertia_caster">
  <inertial>
    <!-- Desplazamiento y orientacion del centro de masa del link con respecto a -->
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <mass value="${m2}"/>
    <inertia ixx="${I_caster}" ixy="0.0" ixz="0.0" iyy="${I_caster}" iyz="0" izz="${I_caster}" />
  </inertial>
</xacro:macro>

<!-- Incluimos archivos adicionales -->
<!-- <xacro:include filename="${find mobile_robot}/model/robot.gazebo"/>  -->
<xacro:include filename="$(find mobile_robot)/model/robot.gazebo"/>
<!-- Defino links y joints, start ficticious link of the robot-->

<!-- Pongo este link porque si no Gazebo se va a quejar -->
<link name="base_footprint"></link>
<joint name="body_link_join" type="fixed">
    <parent link="base_footprint"/>
    <child link="body_link"/>
</joint>

<!-- Fin del link ficticio que le armamos, va como agarrado al piso, el c1 de la filminas-->


<!-- #########################################-->
<!-- START: BODY LINK OF THE ROBOT-->
<!-- #########################################-->

<link name="body_link">
    <visual>
        <geometry>
            <box size="${a} ${c} ${b}"/>    
        </geometry>
    <origin rpy="0.0 0.0 0.0" xyz= "0.0 0.0 ${s1}"/>    <!--Distancia y orientacion del sistema de coordenadas del centro de masa nuestro cuerpo al frame-->
    </visual>


    <collision>
        <geometry>
            <box size="${a} ${c} ${b}"/>
        </geometry>
        <origin rpy="0.0 0.0 0.0" xyz= "0.0 0.0 ${s1}"/>    <!--Distancia y orientacion del sistema de coordenadas del centro de masa nuestro cuerpo al frame-->
    </collision>

    <xacro:inertia_body />
</link>
<!-- #########################################-->
<!-- END: BODY LINK OF THE ROBOT-->
<!-- #########################################-->

<!-- #########################################-->
<!-- START: BACK RIGHT WHEEL OF THE ROBOT AND THE JOINT-->
<!-- #########################################-->

<joint name="wheel1_joint" type="continuous">
    <parent link="body_link"/>
    <child link="wheel1_link"/>
    <origin xyz= "${-s2} ${-s4} ${r}" rpy="0.0 0.0 0.0"/> <!-- Coordinate system of the stuff attached to the joint to respect a coordinate frame of the parent link-->
    <axis xyz="0.0 1.0 0.0"/>
    <limit effort="50000" velocity="10"/> <!--Torque maximo que se le puede aplicar, el segundo argumento es el maximo de la velocidad que se le puede aplicar-->
    <dynamics damping="1.0" friction="1.0"/>
</joint>

<link name="wheel1_link">
    <visual>
        <origin rpy="1.570795 0 0" xyz="0.0 0.0 0.0"/>
        <geometry>
            <cylinder radius="${r}" length="${d}"/>
        </geometry>
    </visual>

    <collision>
        <origin rpy="1.570795 0 0" xyz="0.0 0.0 0.0"/>
        <geometry>
            <cylinder radius="${r}" length="${d}"/>
        </geometry>
    </collision>

    <xacro:inertia_wheel/>
</link>

<!-- #########################################-->
<!-- END: BODY LINK OF THE ROBOT-->
<!-- #########################################-->

<!-- #########################################-->
<!-- START: BACK LEFT WHEEL OF THE ROBOT AND THE JOINT-->
<!-- #########################################-->

<joint name="wheel2_joint" type="continuous">
    <parent link="body_link"/>
    <child link="wheel2_link"/>
    <origin xyz= "${-s2} ${s4} ${r}" rpy="0.0 0.0 0.0"/> <!-- Coordinate system of the stuff attached to the joint to respect a coordinate frame of the parent link-->
    <axis xyz="0.0 1.0 0.0"/>
    <limit effort="50000" velocity="10"/> <!--Torque maximo que se le puede aplicar, el segundo argumento es el maximo de la velocidad que se le puede aplicar-->
    <dynamics damping="1.0" friction="1.0"/>
</joint>

<link name="wheel2_link">
    <visual>
        <origin rpy="1.570795 0 0" xyz="0.0 0.0 0.0"/>
        <geometry>
            <cylinder radius="${r}" length="${d}"/>
        </geometry>
    </visual>

    <collision>
        <origin rpy="1.570795 0 0" xyz="0.0 0.0 0.0"/>
        <geometry>
            <cylinder radius="${r}" length="${d}"/>
        </geometry>
    </collision>

    <xacro:inertia_wheel/>
</link>

<joint name="caster_joint" type="fixed">
  <parent link="body_link"/>
  <child link="caster_link"/>
  <origin xyz="${s3} 0 ${r}" rpy="0 0 0"/>
</joint>

<link name="caster_link">
  <visual>
    <origin xyz="0 0 0" rpy="0 0 0"/>
    <geometry>
      <sphere radius="${r}"/>
    </geometry>
  </visual>

  <collision>
    <origin xyz="0 0 0" rpy="0 0 0"/>
    <geometry>
      <sphere radius="${r}"/>
    </geometry>
  </collision>

  <xacro:inertia_caster/>
</link>


<!-- ###################################-->
<!-- ############LIDAR################# -->
<!-- ###################################-->

<joint name = "lidar_joint" type="fixed">
    <origin xyz="0.0 0.0 ${b+r}" rpy= "0 0 0"/>
    <parent link="body_link"/>
    <child link="lidar_link"/>
    <axis xyz="0 1 0" rpy="0 0 0"/>
</joint>

<link name='lidar_link'>
    <visual>
        <origin xyz="0 0 0.05" rpy="0 0 0"/>
        <geometry>
            <cylinder radius="0.1" length="0.1"/>
        </geometry>
    </visual>


    <collision name='collision'>
        <origin xyz='0 0 0.05 rpy="0 0 0"'/>
        <geometry>
            <cylinder radius="0.1" length="0.1"/>
        </geometry>        
    </collision>

    <inertial>
        <mass value="1e-6"/>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <inertia ixx="1e-6" ixy="0" ixz="0" 
        iyy="1e-6" iyz="0" izz="1e-6"/>
    </inertial>
</link>
<!-- ###################################-->
<!-- ############  FIN LIDAR  ##########-->
<!-- ###################################-->



</robot>
